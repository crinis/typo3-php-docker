;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Custom configuration to overwrite settings from php.ini ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This sets the maximum time in seconds a script is allowed to run before it is terminated by the parser. This helps prevent poorly written scripts from tying up the server. The default setting is 30. When running PHP from the command line the default setting is 0.
; On non Windows systems, the maximum execution time is not affected by system calls, stream operations etc. Please see the set_time_limit() function for more details.
; Your web server can have other timeout configurations that may also interrupt PHP execution. Apache has a Timeout directive and IIS has a CGI timeout function. Both default to 300 seconds. See your web server documentation for specific details.
max_execution_time = 240

# This sets the maximum amount of memory in bytes that a script is allowed to allocate. This helps prevent poorly written scripts for eating up all available memory on a server. Note that to have no memory limit, set this directive to -1.
# When an int is used, the value is measured in bytes.
memory_limit = 384M

; Sets max size of post data allowed. This setting also affects file upload. To upload large files, this value must be larger than upload_max_filesize. Generally speaking, memory_limit should be larger than post_max_size. When an int is used, the value is measured in bytes.
; If the size of post data is greater than post_max_size, the $_POST and $_FILES superglobals are empty.
; This can be tracked in various ways, e.g. by passing the $_GET variable to the script processing the data, i.e. <form action="edit.php?processed=1">, and then checking if $_GET['processed'] is set. 
post_max_size = 48M

; The maximum size of an uploaded file.
; post_max_size must be larger than this value.
; When an int is used, the value is measured in bytes. Shorthand notation, as described in this FAQ, may also be used. 
upload_max_filesize = 32M

; How many input variables may be accepted (limit is applied to $_GET, $_POST and $_COOKIE superglobal separately).
; Use of this directive mitigates the possibility of denial of service attacks which use hash collisions.
; If there are more input variables than specified by this directive, an E_WARNING is issued, and further input variables are truncated from the request. 
max_input_vars = 2000

; PHP JIT compiler must be activated. Needed for proper Fluid parsing.
pcre.jit=1
